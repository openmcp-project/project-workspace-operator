package v1alpha1

import (
	"context"
	"fmt"
	"strings"

	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/webhook"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// log is for logging in this package.
var workspacelog = logf.Log.WithName("workspace-resource")

func (r *Workspace) SetupWebhookWithManager(mgr ctrl.Manager, memberOverridesName string) error {

	return ctrl.NewWebhookManagedBy(mgr).
		For(r).
		WithDefaulter(&Workspace{}).
		WithValidator(&workspaceValidator{
			Client:       mgr.GetClient(),
			overrideName: memberOverridesName,
		}).
		Complete()
}

// +kubebuilder:webhook:path=/mutate-core-openmcp-cloud-v1alpha1-workspace,mutating=true,failurePolicy=fail,sideEffects=None,groups=core.openmcp.cloud,resources=workspaces,verbs=create;update,versions=v1alpha1,name=mworkspace.kb.io,admissionReviewVersions=v1

var _ webhook.CustomDefaulter = &Workspace{}

// Default implements webhook.CustomDefaulter so a webhook will be registered for the type
func (w *Workspace) Default(ctx context.Context, obj runtime.Object) error {
	workspace, err := expectWorkspace(obj)
	if err != nil {
		return err
	}

	req, err := admission.RequestFromContext(ctx)
	if err != nil {
		return err
	}

	setCreatedBy(workspace, req)

	return nil
}

// Workspace must implement webhook.CustomValidator in order for it's Mutating/Validating Webhook configuration to be generated by 	"github.com/openmcp-project/controller-utils/pkg/init/webhooks"
var _ webhook.CustomValidator = &Workspace{}

func (w *Workspace) ValidateCreate(ctx context.Context, obj runtime.Object) (warnings admission.Warnings, err error) {
	return
}
func (w *Workspace) ValidateUpdate(ctx context.Context, oldObj, newObj runtime.Object) (warnings admission.Warnings, err error) {
	return
}
func (w *Workspace) ValidateDelete(ctx context.Context, obj runtime.Object) (warnings admission.Warnings, err error) {
	return
}

// +kubebuilder:webhook:path=/validate-core-openmcp-cloud-v1alpha1-workspace,mutating=false,failurePolicy=fail,sideEffects=None,groups=core.openmcp.cloud,resources=workspaces,verbs=create;update;delete,versions=v1alpha1,name=vworkspace.kb.io,admissionReviewVersions=v1

var _ webhook.CustomValidator = &workspaceValidator{}

type workspaceValidator struct {
	client.Client
	overrideName string
}

// ValidateCreate implements webhook.CustomValidator so a webhook will be registered for the type
func (v *workspaceValidator) ValidateCreate(ctx context.Context, obj runtime.Object) (warnings admission.Warnings, err error) {
	workspace, err := expectWorkspace(obj)
	if err != nil {
		return
	}
	workspacelog.Info("validate create", "name", workspace.Name)

	userInfo, err := userInfoFromContext(ctx)
	if err != nil {
		return
	}
	validRole, err := v.ensureValidRole(ctx, workspace)
	if err != nil {
		return warnings, err
	}
	if !validRole {
		return warnings, errRequestingUserNoAccess(userInfo.Username)
	}

	return
}

// ValidateUpdate implements webhook.CustomValidator so a webhook will be registered for the type
func (v *workspaceValidator) ValidateUpdate(ctx context.Context, oldObj, newObj runtime.Object) (warnings admission.Warnings, err error) {
	oldWorkspace, err := expectWorkspace(oldObj)
	if err != nil {
		return
	}

	newWorkspace, err := expectWorkspace(newObj)
	if err != nil {
		return
	}

	workspacelog.Info("validate update", "name", oldWorkspace.Name)

	if err = verifyCreatedByUnchanged(oldWorkspace, newWorkspace); err != nil {
		return
	}

	userInfo, err := userInfoFromContext(ctx)
	if err != nil {
		return
	}
	validRole, err := v.ensureValidRole(ctx, oldWorkspace)
	if err != nil {
		return warnings, err
	}
	if !validRole {
		return warnings, errRequestingUserNoAccess(userInfo.Username)
	}
	// ensure the user can't remove themselves from the member list
	validNewRole, err := v.ensureValidRole(ctx, newWorkspace)
	if err != nil {
		return warnings, err
	}
	if !validNewRole {
		return warnings, errRequestingUserNoAccess(userInfo.Username)
	}

	return
}

// ValidateDelete implements webhook.CustomValidator so a webhook will be registered for the type
func (v *workspaceValidator) ValidateDelete(ctx context.Context, obj runtime.Object) (warnings admission.Warnings, err error) {
	workspace, err := expectWorkspace(obj)
	if err != nil {
		return
	}

	workspacelog.Info("validate delete", "name", workspace.Name)

	if validRole, err := v.ensureValidRole(ctx, workspace); !validRole {
		return warnings, err
	}
	return
}

// expectWorkspace casts the given runtime.Object to *Workspace. Returns an error in case the object can't be casted.
func expectWorkspace(obj runtime.Object) (*Workspace, error) {
	workspace, ok := obj.(*Workspace)
	if !ok {
		return nil, fmt.Errorf("expected a Workspace but got a %T", obj)
	}
	return workspace, nil
}

func (v *workspaceValidator) ensureValidRole(ctx context.Context, workspace *Workspace) (bool, error) {
	userInfo, err := userInfoFromContext(ctx)
	if err != nil {
		return false, fmt.Errorf("failed to get userInfo")
	}
	if workspace.UserInfoHasRole(userInfo, WorkspaceRoleAdmin) || isOwnServiceAccount(userInfo) {
		return true, nil
	}

	if v.overrideName == "" {
		return false, nil
	}

	overrides := &MemberOverrides{}
	if err := v.Get(ctx, types.NamespacedName{Name: v.overrideName}, overrides); err != nil {
		return false, err
	}

	if !overrides.HasAdminOverrideForResource(&userInfo, workspace.Name, workspace.Kind) {
		return false, nil
	}
	// slightly hacky way to get parent project name
	projectName, ok := strings.CutPrefix(workspace.Namespace, "project-")
	if !ok || projectName == "" {
		return false, fmt.Errorf("failed to get Workspace Project name")
	}

	projectGVK := GroupVersion.WithKind("Project")

	// the subject must have admin access for the parent project as well.
	if overrides.HasAdminOverrideForResource(&userInfo, projectName, projectGVK.Kind) {
		return true, nil
	}

	return false, nil
}
